var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import fs from 'fs-extra';
import path from 'path';
import { cac } from 'cac';
import chalk from 'chalk';
import { generate, startServer } from './core.js';
import { __dirname } from './common/utils-cjs.js';
var cli = cac('cypress-image-diff-html-report');
cli
    .option('-c, --configFile <file>', 'Specify config file, will be overwritten by other config options if provided, relative to the process.cwd()')
    .option('--rd, --reportJsonDir <dir>', 'Specify the report json directory, relative to the process.cwd(). Cypress-image-diff-html-report will automatically look for the latest created json file in this directory')
    .option('--rf, --reportJsonFilePath <file>', 'Specify the report json file path, relative to the process.cwd(). If provided, reportJsonDir will be ignored')
    .option('--baseDir <dir>', 'Specify the base directory for all the interal paths in the report json, relative to the process.cwd(). (Note: This field does not have any effect on the configFile, reportJsonFilePath and outputDir)');
cli
    .command('generate', 'Generate HTML report')
    .option('-o, --outputDir <dir>', 'Set the output directory of the generated HTML report, relative to the process.cwd()')
    .option('--inlineAssets', 'Inline all screenshots to base64 for the generated HTML')
    .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, generate(options)];
            case 1:
                _a.sent();
                console.log(chalk.green("[cypress-image-diff-html-report]: Generated successfully!"));
                return [3 /*break*/, 3];
            case 2:
                err_1 = _a.sent();
                console.log(chalk.red("[cypress-image-diff-html-report]: ".concat(err_1.message)));
                process.exit(1);
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); });
cli
    .command('start', 'Start the local server')
    .option('--autoOpen', 'Open the HTML report in the default browser as soon as the server starts')
    .option('--serverPort <port>', 'Set the port of the local server')
    .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, startServer(options)];
            case 1:
                _a.sent();
                return [3 /*break*/, 3];
            case 2:
                err_2 = _a.sent();
                console.log(chalk.red("[cypress-image-diff-html-report]: ".concat(err_2.message)));
                process.exit(1);
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); });
var version = JSON.parse(fs
    .readFileSync(path.join(__dirname(import.meta.url), '../package.json'))
    .toString()).version;
cli.help();
cli.version(version);
export function run() {
    try {
        cli.parse();
    }
    catch (err) {
        console.log(chalk.red("[cypress-image-diff-html-report]: ".concat(err.message)));
        cli.outputHelp();
        process.exit(1);
    }
}
