var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import merge from 'lodash/merge.js';
import maxBy from 'lodash/maxBy.js';
import { DEFAULT_CONFIG, DEFAULT_CONFIG_PATH } from './constants.js';
import { __dirname, dynamicImport } from './utils-cjs.js';
export function defineConfig(config) {
    return config;
}
export function getResolvedConfig(_a) {
    if (_a === void 0) { _a = {}; }
    var configFile = _a.configFile, config = __rest(_a, ["configFile"]);
    return __awaiter(this, void 0, void 0, function () {
        var userConfig, err_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 4]);
                    return [4 /*yield*/, dynamicImport(path.join(process.cwd(), configFile !== null && configFile !== void 0 ? configFile : DEFAULT_CONFIG_PATH))];
                case 1:
                    userConfig = _b.sent();
                    return [3 /*break*/, 4];
                case 2:
                    err_1 = _b.sent();
                    return [4 /*yield*/, getResolvedReportJsonPath(merge({}, DEFAULT_CONFIG, config))];
                case 3: return [2 /*return*/, _b.sent()];
                case 4: return [4 /*yield*/, getResolvedReportJsonPath(merge({}, DEFAULT_CONFIG, userConfig.default, config))];
                case 5: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
export function getResolvedReportJson(config, mode) {
    if (mode === void 0) { mode = 'local'; }
    return __awaiter(this, void 0, void 0, function () {
        var json, jsonWithTotalStats, _a;
        var _b;
        var _this = this;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, getReportJson(config.reportJsonFilePath)];
                case 1:
                    json = _c.sent();
                    jsonWithTotalStats = getReportJsonWithTotalStats(json);
                    _a = [__assign({}, jsonWithTotalStats)];
                    _b = {};
                    return [4 /*yield*/, Promise.all(jsonWithTotalStats.suites.map(function (suite) { return __awaiter(_this, void 0, void 0, function () {
                            var _a;
                            var _b;
                            var _this = this;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = [__assign({}, suite)];
                                        _b = {};
                                        return [4 /*yield*/, Promise.all(suite.tests.map(function (test) { return __awaiter(_this, void 0, void 0, function () {
                                                var _a;
                                                var _b;
                                                return __generator(this, function (_c) {
                                                    switch (_c.label) {
                                                        case 0:
                                                            _a = [__assign({}, test)];
                                                            _b = {};
                                                            return [4 /*yield*/, getResolvedScreenshotPath(test.baselinePath, config, mode)];
                                                        case 1:
                                                            _b.baselinePath = _c.sent();
                                                            return [4 /*yield*/, getResolvedScreenshotPath(test.diffPath, config, mode)];
                                                        case 2:
                                                            _b.diffPath = _c.sent();
                                                            return [4 /*yield*/, getResolvedScreenshotPath(test.comparisonPath, config, mode)];
                                                        case 3: return [2 /*return*/, (__assign.apply(void 0, _a.concat([(_b.comparisonPath = _c.sent(), _b)])))];
                                                    }
                                                });
                                            }); }))];
                                    case 1: return [2 /*return*/, (__assign.apply(void 0, _a.concat([(_b.tests = _c.sent(), _b)])))];
                                }
                            });
                        }); }))];
                case 2: return [2 /*return*/, __assign.apply(void 0, _a.concat([(_b.suites = _c.sent(), _b)]))];
            }
        });
    });
}
export function getReportJsonWithTotalStats(json) {
    return __assign(__assign({}, json), { suites: json.suites
            .map(function (suite) { return (__assign(__assign({}, suite), { tests: suite.tests.map(function (test) { return (__assign(__assign({}, test), { passed: test.status === 'pass' ? 1 : 0, failed: test.status === 'fail' ? 1 : 0 })); }) })); })
            .map(function (suite) { return (__assign(__assign({}, suite), { id: suite.path, passed: suite.tests.reduce(function (s, i) { return s + i.passed; }, 0), failed: suite.tests.reduce(function (s, i) { return s + i.failed; }, 0) })); }) });
}
export function getReportHtmlAfterPopulatingData(json) {
    return __awaiter(this, void 0, void 0, function () {
        var htmlFilePath, html, injectedData, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    htmlFilePath = path.join(__dirname(import.meta.url), '../ui/index.html');
                    return [4 /*yield*/, fs.readFile(htmlFilePath, { encoding: 'utf8' })];
                case 1:
                    html = _a.sent();
                    injectedData = {
                        report: json,
                        mode: 'static'
                    };
                    return [2 /*return*/, html.replace('<script id="injected-data"></script>', "<script id=\"injected-data\">window.__injectedData__ = ".concat(JSON.stringify(injectedData), "</script>"))];
                case 2:
                    err_2 = _a.sent();
                    throw Error(err_2.message);
                case 3: return [2 /*return*/];
            }
        });
    });
}
export function changeCwdToPlayground() {
    try {
        var target = path.resolve('playground');
        process.chdir(target);
    }
    catch (err) {
        console.log(chalk.magenta(err));
    }
}
export function getReportJson(filePath) {
    return __awaiter(this, void 0, void 0, function () {
        var sourcePath, report, err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sourcePath = path.join(process.cwd(), filePath);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fs.readFile(sourcePath, { encoding: 'utf8' })];
                case 2:
                    report = _a.sent();
                    return [2 /*return*/, JSON.parse(report)];
                case 3:
                    err_3 = _a.sent();
                    console.log(chalk.red("[cypress-image-diff-html-report]: Cannot find the report json. Are you sure the given path exists?\n        \n".concat(sourcePath)));
                    throw Error();
                case 4: return [2 /*return*/];
            }
        });
    });
}
function getResolvedScreenshotPath(pathname, config, mode) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(config.inlineAssets && mode === 'static')) return [3 /*break*/, 2];
                    return [4 /*yield*/, toBase64(pathname, config)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2: return [2 /*return*/, getNormalisedPath(pathname, config, mode)];
            }
        });
    });
}
function getNormalisedPath(pathname, config, mode) {
    if (pathname === '')
        return '';
    if (mode === 'local')
        return path.join(config.baseDir, pathname);
    var absolutePath = path.join(process.cwd(), config.baseDir, pathname);
    return path.relative(config.outputDir, absolutePath);
}
function toBase64(pathname, config) {
    return __awaiter(this, void 0, void 0, function () {
        var absolutePath, content, err_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (pathname === '')
                        return [2 /*return*/, ''];
                    if (pathname.startsWith('data:image/png;base64,'))
                        return [2 /*return*/, pathname];
                    absolutePath = path.join(process.cwd(), config.baseDir, pathname);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fs.readFile(absolutePath, { encoding: 'base64' })];
                case 2:
                    content = _a.sent();
                    return [2 /*return*/, "data:image/png;base64,".concat(content)];
                case 3:
                    err_4 = _a.sent();
                    throw Error(err_4.message);
                case 4: return [2 /*return*/];
            }
        });
    });
}
function getResolvedReportJsonPath(config) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedConfig, latestReport;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolvedConfig = __assign({}, config);
                    if (!(resolvedConfig.reportJsonFilePath === undefined)) return [3 /*break*/, 2];
                    return [4 /*yield*/, getLatestJsonFromDir(resolvedConfig.reportJsonDir)];
                case 1:
                    latestReport = _a.sent();
                    resolvedConfig.reportJsonFilePath = latestReport;
                    _a.label = 2;
                case 2:
                    delete resolvedConfig.reportJsonDir;
                    console.log(chalk.green("[cypress-image-diff-html-report]: Found a report json at ".concat(path.join(process.cwd(), resolvedConfig.reportJsonFilePath))));
                    return [2 /*return*/, resolvedConfig];
            }
        });
    });
}
function getLatestJsonFromDir(dir) {
    return __awaiter(this, void 0, void 0, function () {
        var fullPath_1, reports, latestJson, err_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    fullPath_1 = path.join(process.cwd(), dir);
                    if (fs.existsSync(fullPath_1) === false) {
                        throw Error("Given reportJsonDir does not exist ".concat(fullPath_1, ". Make sure you specify a valid reportJsonDir or reportJsonFilePath"));
                    }
                    return [4 /*yield*/, fs.readdir(fullPath_1)];
                case 1:
                    reports = (_a.sent())
                        .filter(function (r) { return path.extname(r) === '.json'; })
                        .map(function (r) { return path.join(fullPath_1, r); });
                    latestJson = maxBy(reports, function (r) { return fs.statSync(r).ctimeMs; });
                    if (latestJson === undefined) {
                        throw Error("Cannot find any report json in this directory ".concat(fullPath_1));
                    }
                    return [2 /*return*/, path.relative(process.cwd(), latestJson)];
                case 2:
                    err_5 = _a.sent();
                    throw Error(err_5.message);
                case 3: return [2 /*return*/];
            }
        });
    });
}
