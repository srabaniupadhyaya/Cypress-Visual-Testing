var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import fs from 'fs-extra';
import path from 'path';
import { getReportJson, getResolvedReportJson } from '../common/utils.js';
var Controller = /** @class */ (function () {
    function Controller(config) {
        this.config = config;
    }
    Controller.prototype.getReports = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getResolvedReportJson(this.config, 'local')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Controller.prototype.updateTest = function (testId) {
        return __awaiter(this, void 0, void 0, function () {
            var originalReport, _a, suiteIndex, testIndex, foundTest, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, getReportJson(this.config.reportJsonFilePath)];
                    case 1:
                        originalReport = _c.sent();
                        _a = this.findTest(originalReport, testId), suiteIndex = _a[0], testIndex = _a[1];
                        foundTest = originalReport.suites[suiteIndex].tests[testIndex];
                        return [4 /*yield*/, this.updateScreenshots(foundTest)];
                    case 2:
                        _c.sent();
                        originalReport.suites[suiteIndex].tests.splice(testIndex, 1, __assign(__assign({}, foundTest), { status: 'pass', percentage: 0, diffPath: '' }));
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, fs.writeFile(path.join(process.cwd(), this.config.reportJsonFilePath), JSON.stringify(originalReport, null, 2))];
                    case 4:
                        _c.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        _b = _c.sent();
                        throw Error('Cannot overwrite the report json file');
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Controller.prototype.findTest = function (report, _a) {
        var suiteId = _a.suiteId, name = _a.name;
        var foundSuiteIndex = report.suites.findIndex(function (s) { return s.path === suiteId; });
        if (foundSuiteIndex === -1) {
            throw Error("Could not find the test with spec path ".concat(suiteId));
        }
        var foundTestIndex = report.suites[foundSuiteIndex].tests.findIndex(function (t) { return t.name === name; });
        if (foundTestIndex === -1) {
            throw Error("Could not find the test with the name ".concat(name));
        }
        return [foundSuiteIndex, foundTestIndex];
    };
    Controller.prototype.updateScreenshots = function (test) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // allow for empty baseline
                        // TODO: implement better solution for this that doesn't rely on hardcoded string replacement of the current path
                        if (!test.baselinePath) {
                            test.baselinePath = test.comparisonPath.replace('/comparison/', '/baseline/');
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs.copyFile(path.join(process.cwd(), test.comparisonPath), path.join(process.cwd(), test.baselinePath))];
                    case 2:
                        _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _c.sent();
                        throw Error('Cannot copy comparison to baseline screenshot');
                    case 4:
                        _c.trys.push([4, 7, , 8]);
                        if (!test.diffPath) return [3 /*break*/, 6];
                        return [4 /*yield*/, fs.remove(path.join(process.cwd(), test.diffPath))];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        _b = _c.sent();
                        throw Error('Cannot remove diff screenshot');
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return Controller;
}());
export { Controller };
